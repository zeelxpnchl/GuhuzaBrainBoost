"use client";

import React, { useEffect, useRef, useState } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useTranslation } from "react-i18next";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import dynamic from "next/dynamic";

const QuizJourney = dynamic(() => import("../components/QuizJourney"), {
    ssr: false,
});

type ProgressBarType = {
    percentage: number;
};

const ProgressBar = ({ percentage }: ProgressBarType) => (
    <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full">
        <div
            className="bg-blue-600 text-xs font-medium text-white text-center p-0.5 leading-none rounded-full transition-all duration-300"
            style={{ width: `${percentage}%` }}
        >
            {Math.floor(percentage)}%
        </div>
    </div>
);

type milestoneType = {
    Milestone_Id: number;
    Milestone_Title: string;
    Milestone_description: string;
    UnlockingLevel: number;
    Milestone_reward_message: string;
    Milestone_Link: string;
    Milestone_Button_CTA: string;
};

type playerType = {
    Player_ID: number;
    Player_name: string;
    Playerpoint: number;
    streak: number;
    lastLogin: Date;
    Level_Id: number;
    Milestone_Id?: number;
    milestone: milestoneType;
};

type typePlayerHeroSection = {
    player: playerType;
    playerRank: number;
};

function ProfileHerosection({ player, playerRank }: typePlayerHeroSection) {
    const router = useRouter();
    const { t } = useTranslation();
    const [mounted, setMounted] = useState(false);
    const reportRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        setMounted(true);
    }, []);

    const handleClaimReward = () => {
        router.push("/reward");
    };

    const handleDownloadPDF = async () => {
        const pdf = new jsPDF("p", "mm", "a4");
        const pageWidth = pdf.internal.pageSize.getWidth();

        const response = await fetch("/mascot/proudMascot.png");
        const blob = await response.blob();
        const base64 = await new Promise<string>((resolve) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result as string);
            reader.readAsDataURL(blob);
        });

        pdf.setFont("times", "bold");
        pdf.setFontSize(26);
        pdf.setTextColor(33, 37, 41);
        pdf.text("Guhuza Hero Report", pageWidth / 2, 25, { align: "center" });

        pdf.addImage(base64, "PNG", pageWidth / 2 - 35, 30, 70, 70);

        pdf.setFontSize(12);
        pdf.setFont("helvetica", "normal");
        pdf.setTextColor(90);
        pdf.text(`Generated on ${new Date().toLocaleDateString()}`, pageWidth / 2, 105, { align: "center" });

        const cardX = 20;
        const cardY = 115;
        const cardW = pageWidth - 40;

        pdf.setDrawColor(200, 200, 255);
        pdf.setFillColor(245, 245, 255);
        pdf.roundedRect(cardX, cardY, cardW, 155, 5, 5, "FD");

        let y = cardY + 16;
        const addRow = (label: string, value: string | number) => {
            pdf.setFont("helvetica", "bold");
            pdf.setFontSize(12);
            pdf.setTextColor(60);
            pdf.text(label, cardX + 10, y);
            pdf.setFont("helvetica", "normal");
            pdf.setTextColor(30);
            pdf.text(String(value), cardX + 60, y);
            y += 12;
        };

        addRow("Name", player?.Player_name || "Guest");
        addRow("Rank", playerRank);
        addRow("Points", player?.Playerpoint ?? 0);
        addRow("Level", player?.Level_Id ?? 0);
        addRow("Streak", `${player?.streak ?? 0} Days`);
        addRow("Badge", player?.milestone?.Milestone_Title || "None");
        addRow(
            "Last Login",
            new Date().toLocaleString("en-CA", {
                year: "numeric",
                month: "short",
                day: "numeric",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                hour12: false,
            })
        );

        y += 16;
        pdf.setFont("helvetica", "italic");
        pdf.setFontSize(11);
        pdf.setTextColor(80, 80, 80);
        pdf.text("You're doing amazing! Keep going until the next badge unlocks.", pageWidth / 2, y, {
            align: "center",
        });

        pdf.setFontSize(10);
        pdf.setFont("times", "italic");
        pdf.setTextColor(100, 100, 100);
        pdf.text(`"Keep climbing ‚Äî greatness is earned one level at a time."`, pageWidth / 2, 275, { align: "center" });

        pdf.setFontSize(9);
        pdf.setFont("helvetica", "normal");
        pdf.setTextColor(150);
        pdf.text("Generated by Guhuza Quiz App", pageWidth / 2, 283, { align: "center" });

        pdf.setTextColor(40, 90, 160);
        pdf.setFont("helvetica", "bold");
        pdf.text("www.guhuza.com/dashboard", pageWidth / 2, 289, { align: "center" });

        pdf.save("guhuza-hero-report.pdf");
    };

    const levelsRemaining = (player?.milestone?.UnlockingLevel || 0) - (player?.Level_Id || 0);
    const canClaim = player?.Level_Id >= player?.milestone?.UnlockingLevel;
    const progress = levelsRemaining <= 0
        ? 100
        : (player.Level_Id / player.milestone.UnlockingLevel) * 100;

    if (!mounted) return null;

    return (
        <div className="container mx-auto max-w-6xl transition-colors duration-300">
            <h1 className="text-3xl font-bold text-gray-800 dark:text-white mb-6">
                {t("profile.hero.greeting", { name: player?.Player_name })}
            </h1>

            <div className="flex flex-col flex-wrap md:flex-row gap-8 md:gap-12">
                <div className="flex-1" ref={reportRef}>
                    <div className="rounded-lg bg-blue-50 dark:bg-neutral-800 transition-colors duration-300">
                        <div className="grid grid-cols-3 py-6">
                            <div className="text-center">
                                <p className="text-gray-500 dark:text-gray-300 text-sm mb-1">
                                    {t("profile.hero.ranking")}
                                </p>
                                <p className="text-5xl font-bold text-gray-800 dark:text-white">
                                    {playerRank}
                                </p>
                            </div>
                            <div className="text-center">
                                <p className="text-gray-500 dark:text-gray-300 text-sm mb-1">
                                    {t("profile.hero.points")}
                                </p>
                                <p className="text-5xl font-bold text-gray-800 dark:text-white">
                                    {player?.Playerpoint}
                                </p>
                            </div>
                            <div className="text-center">
                                <p className="text-gray-500 dark:text-gray-300 text-sm mb-1">
                                    {t("profile.hero.level")}
                                </p>
                                <p className="text-5xl font-bold text-gray-800 dark:text-white">
                                    {player?.Level_Id}
                                </p>
                            </div>
                        </div>
                        <div className="flex items-center justify-center bg-blue-50 dark:bg-neutral-800 rounded-b-lg py-6 border-t">
                            <span className="text-blue-300 dark:text-blue-400 mr-2 text-xl">üî•</span>
                            <p className="text-gray-700 dark:text-gray-200 text-xl">
                                {player?.streak} {t("profile.hero.streak")}
                            </p>
                        </div>
                    </div>
                </div>

                <div className="flex flex-row items-start gap-6 px-6 py-6 border border-blue-400 dark:border-blue-600 rounded-lg transition-colors duration-300 w-full max-w-full md:max-w-[520px] min-h-[180px]">
                    <Image
                        src="/ProfileGraphics/Gift.svg"
                        alt="Gift icon"
                        width={100}
                        height={140}
                        className="intersect:motion-preset-stretch-sm intersect-once"
                    />
                    <div className="flex-1">
                        <p className="text-gray-600 dark:text-gray-300 mb-1 text-sm md:text-base leading-snug text-balance max-w-full">
                            {t("profile.hero.solve", {
                                count: levelsRemaining <= 0 ? 0 : levelsRemaining,
                            })}
                        </p>
                        <p className="mb-2 font-semibold text-gray-700 dark:text-white">
                            {player?.milestone?.Milestone_Title}
                        </p>
                        <ProgressBar percentage={progress} />
                        <button
                            className="quizPbtn mt-4"
                            disabled={!canClaim}
                            onClick={handleClaimReward}
                        >
                            {t("profile.hero.claim")}
                        </button>
                    </div>
                </div>
            </div>

            <div className="text-center mt-6">
                <button
                    onClick={handleDownloadPDF}
                    className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition"
                >
                    üì• Download Profile Progress
                </button>
            </div>

            {/* ‚≠ê Rating Section */}
            <div className="flex justify-center mt-8">
                <div className="bg-white dark:bg-neutral-900 border border-gray-200 dark:border-neutral-700 shadow rounded-lg p-6 w-full max-w-sm">
                    <h3 className="text-xl font-semibold mb-3 text-gray-800 dark:text-white">
                        {t("profile.rating")}
                    </h3>
                    <div className="flex items-center mb-2">
                        <span className="text-yellow-400 text-2xl mr-1">‚≠ê</span>
                        <span className="text-yellow-400 text-2xl">‚≠ê</span>
                    </div>
                    <div className="inline-block bg-yellow-100 text-yellow-800 text-sm font-medium px-3 py-1 rounded-full">
                        üèÖ {t("rising_star")}
                    </div>
                </div>
            </div>

            {/* üìò Your Journey Below Rating */}
            <div className="mt-10">
                <QuizJourney />
            </div>
        </div>
    );
}

export default ProfileHerosection;
